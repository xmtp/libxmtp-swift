// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(xmtpv3FFI)
    import xmtpv3FFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_xmtpv3_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_xmtpv3_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(bytes: readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol FfiConversationProtocol {
    func listMessages(opts: FfiListMessagesOptions) async throws -> [FfiMessage]
    func send(contentBytes: [UInt8]) async throws
}

public class FfiConversation: FfiConversationProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_bindings_ffi_fn_free_fficonversation(pointer, $0) }
    }

    public func listMessages(opts: FfiListMessagesOptions) async throws -> [FfiMessage] {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<[FfiMessage], Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_bindings_ffi_fn_method_fficonversation_list_messages(
                    self.pointer,

                    FfiConverterTypeFfiListMessagesOptions.lower(opts),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerSequenceTypeFfiMessageTypeGenericError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func send(contentBytes: [UInt8]) async throws {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<Void, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_bindings_ffi_fn_method_fficonversation_send(
                    self.pointer,

                    FfiConverterSequenceUInt8.lower(contentBytes),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerVoidTypeGenericError,
                    &continuation,
                    $0
                )
            }
        }
    }
}

public struct FfiConverterTypeFfiConversation: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiConversation

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiConversation {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiConversation, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiConversation {
        return FfiConversation(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiConversation) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeFfiConversation_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiConversation {
    return try FfiConverterTypeFfiConversation.lift(pointer)
}

public func FfiConverterTypeFfiConversation_lower(_ value: FfiConversation) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiConversation.lower(value)
}

public protocol FfiConversationsProtocol {
    func list() async throws -> [FfiConversation]
    func newConversation(walletAddress: String) async throws -> FfiConversation
}

public class FfiConversations: FfiConversationsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_bindings_ffi_fn_free_fficonversations(pointer, $0) }
    }

    public func list() async throws -> [FfiConversation] {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<[FfiConversation], Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_bindings_ffi_fn_method_fficonversations_list(
                    self.pointer,

                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerSequenceTypeFfiConversationTypeGenericError,
                    &continuation,
                    $0
                )
            }
        }
    }

    public func newConversation(walletAddress: String) async throws -> FfiConversation {
        // Suspend the function and call the scaffolding function, passing it a callback handler from
        // `AsyncTypes.swift`
        //
        // Make sure to hold on to a reference to the continuation in the top-level scope so that
        // it's not freed before the callback is invoked.
        var continuation: CheckedContinuation<FfiConversation, Error>? = nil
        return try await withCheckedThrowingContinuation {
            continuation = $0
            try! rustCall {
                uniffi_bindings_ffi_fn_method_fficonversations_new_conversation(
                    self.pointer,

                    FfiConverterString.lower(walletAddress),
                    FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                    uniffiFutureCallbackHandlerTypeFfiConversationTypeGenericError,
                    &continuation,
                    $0
                )
            }
        }
    }
}

public struct FfiConverterTypeFfiConversations: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiConversations

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiConversations {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiConversations, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiConversations {
        return FfiConversations(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiConversations) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeFfiConversations_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiConversations {
    return try FfiConverterTypeFfiConversations.lift(pointer)
}

public func FfiConverterTypeFfiConversations_lower(_ value: FfiConversations) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiConversations.lower(value)
}

public protocol FfiListMessagesOptionsProtocol {}

public class FfiListMessagesOptions: FfiListMessagesOptionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_bindings_ffi_fn_free_ffilistmessagesoptions(pointer, $0) }
    }
}

public struct FfiConverterTypeFfiListMessagesOptions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiListMessagesOptions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiListMessagesOptions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiListMessagesOptions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiListMessagesOptions {
        return FfiListMessagesOptions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiListMessagesOptions) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeFfiListMessagesOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiListMessagesOptions {
    return try FfiConverterTypeFfiListMessagesOptions.lift(pointer)
}

public func FfiConverterTypeFfiListMessagesOptions_lower(_ value: FfiListMessagesOptions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiListMessagesOptions.lower(value)
}

public protocol FfiXmtpClientProtocol {
    func conversations() -> FfiConversations
    func walletAddress() -> String
}

public class FfiXmtpClient: FfiXmtpClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_bindings_ffi_fn_free_ffixmtpclient(pointer, $0) }
    }

    public func conversations() -> FfiConversations {
        return try! FfiConverterTypeFfiConversations.lift(
            try!
                rustCall {
                    uniffi_bindings_ffi_fn_method_ffixmtpclient_conversations(self.pointer, $0)
                }
        )
    }

    public func walletAddress() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_bindings_ffi_fn_method_ffixmtpclient_wallet_address(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeFfiXmtpClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiXmtpClient

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiXmtpClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiXmtpClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiXmtpClient {
        return FfiXmtpClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiXmtpClient) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeFfiXmtpClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiXmtpClient {
    return try FfiConverterTypeFfiXmtpClient.lift(pointer)
}

public func FfiConverterTypeFfiXmtpClient_lower(_ value: FfiXmtpClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiXmtpClient.lower(value)
}

// Encapsulates an executor that can run Rust tasks
//
// On Swift, `Task.detached` can handle this we just need to know what priority to send it.
public struct UniFfiForeignExecutor {
    var priority: TaskPriority

    public init(priority: TaskPriority) {
        self.priority = priority
    }

    public init() {
        priority = Task.currentPriority
    }
}

private struct FfiConverterForeignExecutor: FfiConverter {
    typealias SwiftType = UniFfiForeignExecutor
    // Rust uses a pointer to represent the FfiConverterForeignExecutor, but we only need a u8.
    // let's use `Int`, which is equivalent to `size_t`
    typealias FfiType = Int

    static func lift(_ value: FfiType) throws -> SwiftType {
        UniFfiForeignExecutor(priority: TaskPriority(rawValue: numericCast(value)))
    }

    static func lower(_ value: SwiftType) -> FfiType {
        numericCast(value.priority.rawValue)
    }

    static func read(from _: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }

    static func write(_: SwiftType, into _: inout [UInt8]) {
        fatalError("FfiConverterForeignExecutor.read not implemented yet")
    }
}

private func uniffiForeignExecutorCallback(executorHandle: Int, delayMs: UInt32, rustTask: UniFfiRustTaskCallback?, taskData: UnsafeRawPointer?) {
    if let rustTask = rustTask {
        let executor = try! FfiConverterForeignExecutor.lift(executorHandle)
        Task.detached(priority: executor.priority) {
            if delayMs != 0 {
                let nanoseconds: UInt64 = numericCast(delayMs * 1_000_000)
                try! await Task.sleep(nanoseconds: nanoseconds)
            }
            rustTask(taskData)
        }
    }
    // No else branch: when rustTask is null, we should drop the foreign executor. However, since
    // its just a value type, we don't need to do anything here.
}

private func uniffiInitForeignExecutor() {
    uniffi_foreign_executor_callback_set(uniffiForeignExecutorCallback)
}

public struct FfiMessage {
    public var sentAtNs: Int64
    public var convoId: String
    public var addrFrom: String
    public var content: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sentAtNs: Int64, convoId: String, addrFrom: String, content: [UInt8]) {
        self.sentAtNs = sentAtNs
        self.convoId = convoId
        self.addrFrom = addrFrom
        self.content = content
    }
}

extension FfiMessage: Equatable, Hashable {
    public static func == (lhs: FfiMessage, rhs: FfiMessage) -> Bool {
        if lhs.sentAtNs != rhs.sentAtNs {
            return false
        }
        if lhs.convoId != rhs.convoId {
            return false
        }
        if lhs.addrFrom != rhs.addrFrom {
            return false
        }
        if lhs.content != rhs.content {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sentAtNs)
        hasher.combine(convoId)
        hasher.combine(addrFrom)
        hasher.combine(content)
    }
}

public struct FfiConverterTypeFfiMessage: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiMessage {
        return try FfiMessage(
            sentAtNs: FfiConverterInt64.read(from: &buf),
            convoId: FfiConverterString.read(from: &buf),
            addrFrom: FfiConverterString.read(from: &buf),
            content: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: FfiMessage, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.sentAtNs, into: &buf)
        FfiConverterString.write(value.convoId, into: &buf)
        FfiConverterString.write(value.addrFrom, into: &buf)
        FfiConverterSequenceUInt8.write(value.content, into: &buf)
    }
}

public func FfiConverterTypeFfiMessage_lift(_ buf: RustBuffer) throws -> FfiMessage {
    return try FfiConverterTypeFfiMessage.lift(buf)
}

public func FfiConverterTypeFfiMessage_lower(_ value: FfiMessage) -> RustBuffer {
    return FfiConverterTypeFfiMessage.lower(value)
}

public enum GenericError {
    case Generic(err: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeGenericError.lift(error)
    }
}

public struct FfiConverterTypeGenericError: FfiConverterRustBuffer {
    typealias SwiftType = GenericError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GenericError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Generic(
                err: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GenericError, into buf: inout [UInt8]) {
        switch value {
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
        }
    }
}

extension GenericError: Equatable, Hashable {}

extension GenericError: Error {}

public enum SigningError {
    // Simple error enums only carry a message
    case Generic(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSigningError.lift(error)
    }
}

public struct FfiConverterTypeSigningError: FfiConverterRustBuffer {
    typealias SwiftType = SigningError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Generic(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SigningError, into buf: inout [UInt8]) {
        switch value {
        case let .Generic(message):
            writeInt(&buf, Int32(1))
        }
    }
}

extension SigningError: Equatable, Hashable {}

extension SigningError: Error {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for FfiInboxOwner Callback Interface

public protocol FfiInboxOwner: AnyObject {
    func getAddress() -> String
    func sign(text: String) throws -> Data
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceFfiInboxOwner: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeGetAddress(_ swiftCallbackInterface: FfiInboxOwner, _: UnsafePointer<UInt8>, _: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            func makeCall() throws -> Int32 {
                let result = try swiftCallbackInterface.getAddress(
                )
                var writer = [UInt8]()
                FfiConverterString.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        func invokeSign(_ swiftCallbackInterface: FfiInboxOwner, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                let result = try swiftCallbackInterface.sign(
                    text: FfiConverterString.read(from: &reader)
                )
                var writer = [UInt8]()
                FfiConverterData.write(result, into: &writer)
                out_buf.pointee = RustBuffer(bytes: writer)
                return UNIFFI_CALLBACK_SUCCESS
            }
            do {
                return try makeCall()
            } catch let error as SigningError {
                out_buf.pointee = FfiConverterTypeSigningError.lower(error)
                return UNIFFI_CALLBACK_ERROR
            }
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceFfiInboxOwner.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: FfiInboxOwner
            do {
                cb = try FfiConverterCallbackInterfaceFfiInboxOwner.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FfiInboxOwner: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeGetAddress(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            let cb: FfiInboxOwner
            do {
                cb = try FfiConverterCallbackInterfaceFfiInboxOwner.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FfiInboxOwner: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeSign(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceFfiInboxOwner {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_xmtpv3_fn_init_callback_ffiinboxowner(foreignCallbackCallbackInterfaceFfiInboxOwner, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<FfiInboxOwner>()
}

extension FfiConverterCallbackInterfaceFfiInboxOwner: FfiConverter {
    typealias SwiftType = FfiInboxOwner
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for FfiLogger Callback Interface

public protocol FfiLogger: AnyObject {
    func log(level: UInt32, levelLabel: String, message: String)
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceFfiLogger: ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

        func invokeLog(_ swiftCallbackInterface: FfiLogger, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
            var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
            func makeCall() throws -> Int32 {
                try swiftCallbackInterface.log(
                    level: FfiConverterUInt32.read(from: &reader),
                    levelLabel: FfiConverterString.read(from: &reader),
                    message: FfiConverterString.read(from: &reader)
                )
                return UNIFFI_CALLBACK_SUCCESS
            }
            return try makeCall()
        }

        switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceFfiLogger.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: FfiLogger
            do {
                cb = try FfiConverterCallbackInterfaceFfiLogger.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("FfiLogger: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeLog(cb, argsData, argsLen, out_buf)
            } catch {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }

        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
    }

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceFfiLogger {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_xmtpv3_fn_init_callback_ffilogger(foreignCallbackCallbackInterfaceFfiLogger, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<FfiLogger>()
}

extension FfiConverterCallbackInterfaceFfiLogger: FfiConverter {
    typealias SwiftType = FfiLogger
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeFfiConversation: FfiConverterRustBuffer {
    typealias SwiftType = [FfiConversation]

    public static func write(_ value: [FfiConversation], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFfiConversation.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FfiConversation] {
        let len: Int32 = try readInt(&buf)
        var seq = [FfiConversation]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeFfiConversation.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeFfiMessage: FfiConverterRustBuffer {
    typealias SwiftType = [FfiMessage]

    public static func write(_ value: [FfiMessage], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFfiMessage.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FfiMessage] {
        let len: Int32 = try readInt(&buf)
        var seq = [FfiMessage]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeFfiMessage.read(from: &buf))
        }
        return seq
    }
} // Callbacks for async functions

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureCallbackHandlerVoidTypeGenericError(
    rawContinutation: UnsafeRawPointer,
    returnValue _: UInt8,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<Void, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeGenericError.lift)
        continuation.pointee.resume(returning: ())
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerString(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<String, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterString.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeFfiConversationTypeGenericError(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<FfiConversation, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeGenericError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypeFfiConversation.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeFfiConversations(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<FfiConversations, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: nil)
        try continuation.pointee.resume(returning: FfiConverterTypeFfiConversations.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerTypeFfiXmtpClientTypeGenericError(
    rawContinutation: UnsafeRawPointer,
    returnValue: UnsafeMutableRawPointer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<FfiXmtpClient, Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeGenericError.lift)
        try continuation.pointee.resume(returning: FfiConverterTypeFfiXmtpClient.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerSequenceTypeFfiConversationTypeGenericError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<[FfiConversation], Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeGenericError.lift)
        try continuation.pointee.resume(returning: FfiConverterSequenceTypeFfiConversation.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

private func uniffiFutureCallbackHandlerSequenceTypeFfiMessageTypeGenericError(
    rawContinutation: UnsafeRawPointer,
    returnValue: RustBuffer,
    callStatus: RustCallStatus
) {
    let continuation = rawContinutation.bindMemory(
        to: CheckedContinuation<[FfiMessage], Error>.self,
        capacity: 1
    )

    do {
        try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: FfiConverterTypeGenericError.lift)
        try continuation.pointee.resume(returning: FfiConverterSequenceTypeFfiMessage.lift(returnValue))
    } catch {
        continuation.pointee.resume(throwing: error)
    }
}

public func createClient(logger: FfiLogger, ffiInboxOwner: FfiInboxOwner, host: String, isSecure: Bool) async throws -> FfiXmtpClient {
    var continuation: CheckedContinuation<FfiXmtpClient, Error>? = nil
    // Suspend the function and call the scaffolding function, passing it a callback handler from
    // `AsyncTypes.swift`
    //
    // Make sure to hold on to a reference to the continuation in the top-level scope so that
    // it's not freed before the callback is invoked.
    return try await withCheckedThrowingContinuation {
        continuation = $0
        try! rustCall {
            uniffi_bindings_ffi_fn_func_create_client(
                FfiConverterCallbackInterfaceFfiLogger.lower(logger),
                FfiConverterCallbackInterfaceFfiInboxOwner.lower(ffiInboxOwner),
                FfiConverterString.lower(host),
                FfiConverterBool.lower(isSecure),
                FfiConverterForeignExecutor.lower(UniFfiForeignExecutor()),
                uniffiFutureCallbackHandlerTypeFfiXmtpClientTypeGenericError,
                &continuation,
                $0
            )
        }
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_xmtpv3_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_bindings_ffi_checksum_func_create_client() != 2193 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_fficonversation_list_messages() != 31879 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_fficonversation_send() != 7299 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_fficonversations_list() != 21824 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_fficonversations_new_conversation() != 29240 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_ffixmtpclient_conversations() != 43701 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_bindings_ffi_checksum_method_ffixmtpclient_wallet_address() != 34877 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiInitForeignExecutor()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
